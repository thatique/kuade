// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model.proto

	It has these top-level messages:
		PasswordChangeToken
		Point
		Rectangle
		User
		OauthProvider
		UserProfile
		Credentials
		ListUserOptions
		ListPageUser
*/
package model

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import binary "encoding/binary"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserStatus int32

const (
	UserStatus_INACTIVE UserStatus = 0
	UserStatus_ACTIVE   UserStatus = 1
	UserStatus_LOCKED   UserStatus = 2
)

var UserStatus_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
	2: "LOCKED",
}
var UserStatus_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
	"LOCKED":   2,
}

func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}
func (UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

type UserRole int32

const (
	UserRole_VISITOR   UserRole = 0
	UserRole_VENDOR    UserRole = 1
	UserRole_STAFF     UserRole = 2
	UserRole_SUPERUSER UserRole = 3
)

var UserRole_name = map[int32]string{
	0: "VISITOR",
	1: "VENDOR",
	2: "STAFF",
	3: "SUPERUSER",
}
var UserRole_value = map[string]int32{
	"VISITOR":   0,
	"VENDOR":    1,
	"STAFF":     2,
	"SUPERUSER": 3,
}

func (x UserRole) String() string {
	return proto.EnumName(UserRole_name, int32(x))
}
func (UserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

type PasswordChangeToken struct {
	Token     string    `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Email     string    `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password  []byte    `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
}

func (m *PasswordChangeToken) Reset()                    { *m = PasswordChangeToken{} }
func (m *PasswordChangeToken) String() string            { return proto.CompactTextString(m) }
func (*PasswordChangeToken) ProtoMessage()               {}
func (*PasswordChangeToken) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *PasswordChangeToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PasswordChangeToken) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PasswordChangeToken) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *PasswordChangeToken) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type Point struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *Point) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Rectangle struct {
	Lo Point `protobuf:"bytes,1,opt,name=lo" json:"lo"`
	Hi Point `protobuf:"bytes,2,opt,name=hi" json:"hi"`
}

func (m *Rectangle) Reset()                    { *m = Rectangle{} }
func (m *Rectangle) String() string            { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()               {}
func (*Rectangle) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *Rectangle) GetLo() Point {
	if m != nil {
		return m.Lo
	}
	return Point{}
}

func (m *Rectangle) GetHi() Point {
	if m != nil {
		return m.Hi
	}
	return Point{}
}

type User struct {
	ID   ID     `protobuf:"bytes,1,opt,name=id,proto3,customtype=ID" json:"id"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	// name is non unique here
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// email must be unique
	Email     string     `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Role      UserRole   `protobuf:"varint,5,opt,name=role,proto3,enum=kuade.app.model.UserRole" json:"role,omitempty"`
	Status    UserStatus `protobuf:"varint,6,opt,name=status,proto3,enum=kuade.app.model.UserStatus" json:"status,omitempty"`
	CreatedAt time.Time  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *User) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetRole() UserRole {
	if m != nil {
		return m.Role
	}
	return UserRole_VISITOR
}

func (m *User) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus_INACTIVE
}

func (m *User) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type OauthProvider struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *OauthProvider) Reset()                    { *m = OauthProvider{} }
func (m *OauthProvider) String() string            { return proto.CompactTextString(m) }
func (*OauthProvider) ProtoMessage()               {}
func (*OauthProvider) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{4} }

func (m *OauthProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OauthProvider) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type UserProfile struct {
	Icon    string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Bio     string `protobuf:"bytes,2,opt,name=bio,proto3" json:"bio,omitempty"`
	Age     int32  `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	City    string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	State   string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode string `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Point   *Point `protobuf:"bytes,8,opt,name=point" json:"point,omitempty"`
}

func (m *UserProfile) Reset()                    { *m = UserProfile{} }
func (m *UserProfile) String() string            { return proto.CompactTextString(m) }
func (*UserProfile) ProtoMessage()               {}
func (*UserProfile) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{5} }

func (m *UserProfile) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *UserProfile) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *UserProfile) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UserProfile) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserProfile) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserProfile) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *UserProfile) GetZipcode() string {
	if m != nil {
		return m.Zipcode
	}
	return ""
}

func (m *UserProfile) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

type Credentials struct {
	Email      string    `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password   []byte    `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	UserID     ID        `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,customtype=ID" json:"user_id"`
	Enabled    bool      `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CreatedAt  time.Time `protobuf:"bytes,5,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	LastSignin time.Time `protobuf:"bytes,6,opt,name=last_signin,json=lastSignin,stdtime" json:"last_signin"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{6} }

func (m *Credentials) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Credentials) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *Credentials) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Credentials) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Credentials) GetLastSignin() time.Time {
	if m != nil {
		return m.LastSignin
	}
	return time.Time{}
}

// listing user
type ListUserOptions struct {
	// Filter user for this given role
	Role      UserRole   `protobuf:"varint,1,opt,name=role,proto3,enum=kuade.app.model.UserRole" json:"role,omitempty"`
	Status    UserStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kuade.app.model.UserStatus" json:"status,omitempty"`
	PageSize  int64      `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken []byte     `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListUserOptions) Reset()                    { *m = ListUserOptions{} }
func (m *ListUserOptions) String() string            { return proto.CompactTextString(m) }
func (*ListUserOptions) ProtoMessage()               {}
func (*ListUserOptions) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{7} }

func (m *ListUserOptions) GetRole() UserRole {
	if m != nil {
		return m.Role
	}
	return UserRole_VISITOR
}

func (m *ListUserOptions) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus_INACTIVE
}

func (m *ListUserOptions) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListUserOptions) GetPageToken() []byte {
	if m != nil {
		return m.PageToken
	}
	return nil
}

type ListPageUser struct {
	// The returned users that satisfy ListUserOptions
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	// next_page_token left empty unless there are more objects
	// to return. The value may be returned as ListUserOptions.page_token on a
	// subsequent ListUser call, to fetch the next page of results.
	NextPageToken []byte `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListPageUser) Reset()                    { *m = ListPageUser{} }
func (m *ListPageUser) String() string            { return proto.CompactTextString(m) }
func (*ListPageUser) ProtoMessage()               {}
func (*ListPageUser) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{8} }

func (m *ListPageUser) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ListPageUser) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func init() {
	proto.RegisterType((*PasswordChangeToken)(nil), "kuade.app.model.PasswordChangeToken")
	golang_proto.RegisterType((*PasswordChangeToken)(nil), "kuade.app.model.PasswordChangeToken")
	proto.RegisterType((*Point)(nil), "kuade.app.model.Point")
	golang_proto.RegisterType((*Point)(nil), "kuade.app.model.Point")
	proto.RegisterType((*Rectangle)(nil), "kuade.app.model.Rectangle")
	golang_proto.RegisterType((*Rectangle)(nil), "kuade.app.model.Rectangle")
	proto.RegisterType((*User)(nil), "kuade.app.model.User")
	golang_proto.RegisterType((*User)(nil), "kuade.app.model.User")
	proto.RegisterType((*OauthProvider)(nil), "kuade.app.model.OauthProvider")
	golang_proto.RegisterType((*OauthProvider)(nil), "kuade.app.model.OauthProvider")
	proto.RegisterType((*UserProfile)(nil), "kuade.app.model.UserProfile")
	golang_proto.RegisterType((*UserProfile)(nil), "kuade.app.model.UserProfile")
	proto.RegisterType((*Credentials)(nil), "kuade.app.model.Credentials")
	golang_proto.RegisterType((*Credentials)(nil), "kuade.app.model.Credentials")
	proto.RegisterType((*ListUserOptions)(nil), "kuade.app.model.ListUserOptions")
	golang_proto.RegisterType((*ListUserOptions)(nil), "kuade.app.model.ListUserOptions")
	proto.RegisterType((*ListPageUser)(nil), "kuade.app.model.ListPageUser")
	golang_proto.RegisterType((*ListPageUser)(nil), "kuade.app.model.ListPageUser")
	proto.RegisterEnum("kuade.app.model.UserStatus", UserStatus_name, UserStatus_value)
	golang_proto.RegisterEnum("kuade.app.model.UserStatus", UserStatus_name, UserStatus_value)
	proto.RegisterEnum("kuade.app.model.UserRole", UserRole_name, UserRole_value)
	golang_proto.RegisterEnum("kuade.app.model.UserRole", UserRole_name, UserRole_value)
}
func (m *PasswordChangeToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordChangeToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintModel(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n1, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Latitude != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	return i, nil
}

func (m *Rectangle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rectangle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Lo.Size()))
	n2, err := m.Lo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Hi.Size()))
	n3, err := m.Hi.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.ID.Size()))
	n4, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Slug) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Role != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Role))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintModel(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n5, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *OauthProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OauthProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *UserProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Icon) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Bio) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Bio)))
		i += copy(dAtA[i:], m.Bio)
	}
	if m.Age != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Age))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Zipcode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Zipcode)))
		i += copy(dAtA[i:], m.Zipcode)
	}
	if m.Point != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Point.Size()))
		n6, err := m.Point.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *Credentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.UserID.Size()))
	n7, err := m.UserID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.Enabled {
		dAtA[i] = 0x20
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintModel(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n8, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x32
	i++
	i = encodeVarintModel(dAtA, i, uint64(types.SizeOfStdTime(m.LastSignin)))
	n9, err := types.StdTimeMarshalTo(m.LastSignin, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *ListUserOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Role))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PageSize))
	}
	if len(m.PageToken) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.PageToken)))
		i += copy(dAtA[i:], m.PageToken)
	}
	return i, nil
}

func (m *ListPageUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPageUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NextPageToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.NextPageToken)))
		i += copy(dAtA[i:], m.NextPageToken)
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PasswordChangeToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovModel(uint64(l))
	return n
}

func (m *Point) Size() (n int) {
	var l int
	_ = l
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	return n
}

func (m *Rectangle) Size() (n int) {
	var l int
	_ = l
	l = m.Lo.Size()
	n += 1 + l + sovModel(uint64(l))
	l = m.Hi.Size()
	n += 1 + l + sovModel(uint64(l))
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovModel(uint64(m.Role))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovModel(uint64(l))
	return n
}

func (m *OauthProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *UserProfile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Bio)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovModel(uint64(m.Age))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Zipcode)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Point != nil {
		l = m.Point.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Credentials) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = m.UserID.Size()
	n += 1 + l + sovModel(uint64(l))
	if m.Enabled {
		n += 2
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovModel(uint64(l))
	l = types.SizeOfStdTime(m.LastSignin)
	n += 1 + l + sovModel(uint64(l))
	return n
}

func (m *ListUserOptions) Size() (n int) {
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovModel(uint64(m.Role))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if m.PageSize != 0 {
		n += 1 + sovModel(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *ListPageUser) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PasswordChangeToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordChangeToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordChangeToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)
			if m.Password == nil {
				m.Password = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rectangle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rectangle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rectangle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Hi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (UserStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OauthProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OauthProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OauthProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zipcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zipcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Point == nil {
				m.Point = &Point{}
			}
			if err := m.Point.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)
			if m.Password == nil {
				m.Password = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.LastSignin, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (UserStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = append(m.PageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.PageToken == nil {
				m.PageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPageUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPageUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPageUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model.proto", fileDescriptorModel) }
func init() { golang_proto.RegisterFile("model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 815 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0x23, 0x45,
	0x10, 0xdd, 0x1e, 0x7b, 0x1c, 0x4f, 0x39, 0x21, 0x56, 0x13, 0x60, 0xc8, 0x42, 0x62, 0xf9, 0x80,
	0xac, 0x65, 0xd7, 0x91, 0xbc, 0xe2, 0xc8, 0x21, 0x76, 0xbc, 0x92, 0xc5, 0x6a, 0x6d, 0xb5, 0x9d,
	0x1c, 0xb8, 0x58, 0x6d, 0x4f, 0xed, 0xa4, 0x95, 0xf1, 0xf4, 0x68, 0xba, 0x0d, 0x6c, 0x7e, 0x02,
	0x0e, 0x7c, 0x01, 0x7f, 0xc0, 0x1f, 0x70, 0xdc, 0x23, 0x5c, 0x39, 0x2c, 0x28, 0xfc, 0x08, 0xea,
	0x1a, 0x4f, 0x12, 0xc2, 0x02, 0xcb, 0x5e, 0x46, 0x55, 0xd5, 0xaf, 0xaa, 0x5e, 0xbf, 0xaa, 0x1e,
	0x68, 0xac, 0x74, 0x84, 0x49, 0x37, 0xcb, 0xb5, 0xd5, 0x7c, 0xf7, 0x62, 0x2d, 0x23, 0xec, 0xca,
	0x2c, 0xeb, 0x52, 0x78, 0x7f, 0x2f, 0xd6, 0xb1, 0xa6, 0xb3, 0x23, 0x67, 0x15, 0xb0, 0xfd, 0xc3,
	0x58, 0xeb, 0x38, 0xc1, 0x23, 0xf2, 0x16, 0xeb, 0xe7, 0x47, 0x56, 0xad, 0xd0, 0x58, 0xb9, 0xca,
	0x0a, 0x40, 0xfb, 0x07, 0x06, 0xef, 0x4e, 0xa4, 0x31, 0x5f, 0xeb, 0x3c, 0x1a, 0x9c, 0xcb, 0x34,
	0xc6, 0x99, 0xbe, 0xc0, 0x94, 0xef, 0x81, 0x6f, 0x9d, 0x11, 0xb2, 0x16, 0xeb, 0x04, 0xa2, 0x70,
	0x5c, 0x14, 0x57, 0x52, 0x25, 0xa1, 0x57, 0x44, 0xc9, 0xe1, 0xfb, 0x50, 0xcf, 0x36, 0x25, 0xc2,
	0x4a, 0x8b, 0x75, 0xb6, 0xc5, 0xb5, 0xcf, 0x07, 0x00, 0xcb, 0x1c, 0xa5, 0xc5, 0x68, 0x2e, 0x6d,
	0x58, 0x6d, 0xb1, 0x4e, 0xa3, 0xb7, 0xdf, 0x2d, 0x58, 0x75, 0x4b, 0x56, 0xdd, 0x59, 0xc9, 0xaa,
	0x5f, 0x7f, 0xf9, 0xea, 0xf0, 0xde, 0x77, 0xbf, 0x1d, 0x32, 0x11, 0x6c, 0xf2, 0x8e, 0x6d, 0xfb,
	0x18, 0xfc, 0x89, 0x56, 0xa9, 0x75, 0x9d, 0x12, 0x69, 0x95, 0x5d, 0x47, 0x48, 0xc4, 0x98, 0xb8,
	0xf6, 0xf9, 0x47, 0x10, 0x24, 0x3a, 0x8d, 0x8b, 0x43, 0x8f, 0x0e, 0x6f, 0x02, 0xed, 0x18, 0x02,
	0x81, 0x4b, 0x2b, 0xd3, 0x38, 0x41, 0xfe, 0x10, 0xbc, 0x44, 0x53, 0x81, 0x46, 0xef, 0xfd, 0xee,
	0x1d, 0x25, 0xbb, 0xd4, 0xaa, 0x5f, 0x75, 0x44, 0x84, 0x97, 0x68, 0x87, 0x3e, 0x57, 0x54, 0xf1,
	0x3f, 0xd1, 0xe7, 0xaa, 0xfd, 0xad, 0x07, 0xd5, 0x53, 0x83, 0x39, 0x6f, 0x81, 0xa7, 0x22, 0x6a,
	0xb2, 0xdd, 0x6f, 0xba, 0xe3, 0x5f, 0x5f, 0x1d, 0x7a, 0xa3, 0x93, 0x2b, 0xfa, 0x0a, 0x4f, 0x45,
	0x9c, 0x43, 0xd5, 0x24, 0xeb, 0x78, 0x23, 0x26, 0xd9, 0x2e, 0x96, 0xca, 0x15, 0x92, 0x8e, 0x81,
	0x20, 0xfb, 0x46, 0xf5, 0xea, 0x6d, 0xd5, 0x1f, 0x41, 0x35, 0xd7, 0x09, 0x86, 0x7e, 0x8b, 0x75,
	0xde, 0xe9, 0x7d, 0xf8, 0x37, 0x62, 0x8e, 0x84, 0xd0, 0x09, 0x0a, 0x82, 0xf1, 0xc7, 0x50, 0x33,
	0x56, 0xda, 0xb5, 0x09, 0x6b, 0x94, 0x70, 0xff, 0xb5, 0x09, 0x53, 0x82, 0x88, 0x0d, 0xf4, 0xce,
	0xf4, 0xb6, 0xde, 0x6e, 0x7a, 0x9f, 0xc1, 0xce, 0x58, 0xae, 0xed, 0xf9, 0x24, 0xd7, 0x5f, 0xa9,
	0x08, 0xf3, 0xeb, 0x3b, 0xb2, 0x5b, 0x77, 0x6c, 0x42, 0xe5, 0x02, 0x5f, 0x6c, 0xa4, 0x70, 0x66,
	0xfb, 0x17, 0x06, 0x0d, 0x47, 0x69, 0x92, 0xeb, 0xe7, 0x2a, 0x41, 0x97, 0xa5, 0x96, 0xba, 0x5c,
	0x48, 0xb2, 0x5d, 0xd6, 0x42, 0xe9, 0x32, 0x6b, 0xa1, 0xb4, 0x8b, 0xc8, 0xb8, 0x90, 0xcf, 0x17,
	0xce, 0xe4, 0x21, 0x6c, 0xc9, 0x28, 0xca, 0xd1, 0x98, 0x8d, 0x7e, 0xa5, 0xeb, 0x2a, 0x2e, 0x95,
	0x7d, 0x41, 0x0a, 0x06, 0x82, 0x6c, 0xa7, 0xb5, 0xbb, 0x3b, 0x92, 0x4a, 0x81, 0x28, 0x1c, 0x57,
	0xe3, 0x52, 0x65, 0x4b, 0x1d, 0x21, 0x89, 0x10, 0x88, 0xd2, 0xe5, 0x0f, 0xc1, 0xcf, 0xdc, 0x06,
	0x84, 0xf5, 0x7f, 0xdb, 0x0f, 0x51, 0x80, 0xda, 0xdf, 0x7b, 0xd0, 0x18, 0xe4, 0x18, 0x61, 0x6a,
	0x95, 0x4c, 0xcc, 0xcd, 0x64, 0xd9, 0x3f, 0xbd, 0x27, 0xef, 0xce, 0x7b, 0x7a, 0x04, 0x5b, 0x6b,
	0x83, 0xf9, 0x5c, 0x6d, 0x9e, 0x5a, 0x7f, 0xef, 0x2f, 0xab, 0x55, 0x73, 0x8a, 0x8d, 0x4e, 0x44,
	0xcd, 0x81, 0x46, 0x91, 0x23, 0x8e, 0xa9, 0x5c, 0x24, 0x18, 0xd1, 0xe5, 0xeb, 0xa2, 0x74, 0xef,
	0x8c, 0xd6, 0x7f, 0xab, 0xd1, 0xf2, 0x21, 0x34, 0x12, 0x69, 0xec, 0xdc, 0xa8, 0x38, 0x55, 0x29,
	0x69, 0xf6, 0xa6, 0x55, 0xc0, 0x25, 0x4e, 0x29, 0xaf, 0xfd, 0x23, 0x83, 0xdd, 0xa7, 0xca, 0x58,
	0x47, 0x7e, 0x9c, 0x59, 0xa5, 0x53, 0x73, 0xbd, 0xde, 0xec, 0xff, 0xae, 0xb7, 0xf7, 0xe6, 0xeb,
	0x7d, 0x1f, 0x82, 0x4c, 0xc6, 0x38, 0x37, 0xea, 0xb2, 0x58, 0x99, 0x8a, 0x53, 0x3a, 0xc6, 0xa9,
	0xba, 0x44, 0xfe, 0x31, 0x00, 0x1d, 0x16, 0xbf, 0xc1, 0x2a, 0xcd, 0x81, 0xe0, 0xf4, 0x83, 0x6c,
	0x2f, 0x61, 0xdb, 0x51, 0x9e, 0xc8, 0x18, 0xe9, 0xb9, 0x7f, 0x0a, 0xbe, 0xd3, 0xdc, 0x84, 0xac,
	0x55, 0xe9, 0x34, 0x7a, 0xef, 0xbd, 0x9e, 0x70, 0x81, 0xe1, 0x9f, 0xc0, 0x6e, 0x8a, 0xdf, 0xd8,
	0xf9, 0xad, 0x06, 0xc5, 0xa0, 0x77, 0x5c, 0x78, 0x52, 0x36, 0x79, 0xd0, 0x03, 0xb8, 0xa1, 0xcd,
	0xb7, 0xa1, 0x3e, 0x7a, 0x76, 0x3c, 0x98, 0x8d, 0xce, 0x86, 0xcd, 0x7b, 0x1c, 0xa0, 0xb6, 0xb1,
	0x99, 0xb3, 0x9f, 0x8e, 0x07, 0x5f, 0x0c, 0x4f, 0x9a, 0xde, 0x83, 0xcf, 0xa1, 0x5e, 0x6a, 0xc3,
	0x1b, 0xb0, 0x75, 0x36, 0x9a, 0x8e, 0x66, 0x63, 0x51, 0x24, 0x9c, 0x0d, 0x9f, 0x9d, 0x8c, 0x45,
	0x93, 0xf1, 0x00, 0xfc, 0xe9, 0xec, 0xf8, 0xc9, 0x93, 0xa6, 0xc7, 0x77, 0x20, 0x98, 0x9e, 0x4e,
	0x86, 0xe2, 0x74, 0x3a, 0x14, 0xcd, 0x4a, 0xff, 0x83, 0x97, 0x57, 0x07, 0xec, 0xe7, 0xab, 0x03,
	0xf6, 0xfb, 0xd5, 0x01, 0xfb, 0xe9, 0x8f, 0x03, 0xf6, 0xa5, 0x4f, 0xfc, 0x17, 0x35, 0x1a, 0xe7,
	0xe3, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x3b, 0x36, 0x8c, 0x87, 0x06, 0x00, 0x00,
}
